---
- name: Configure remote machine through operator
  hosts: localhost
  gather_facts: false

  tasks:
    - block:
        - name: Set phase to "Installing"
          include_role:
            name: operator_status
          vars:
            new_phase: "Installing"
            expected_previous_phase: ["", "Failed"]
            new_message: "Starting K3S remote machine configuration"

        - name: Run K3S remote machine role
          import_role:
            name: k3s_remote_machine
          vars:
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no -o ControlPath=none'
            ansible_ssh_private_key_file: /opt/ssh/id_rsa
            ansible_connection: ssh

        # Get token from secret if not init server
        - name: Retrieve k3s token from secret
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: "{{ k3s_prefix_secret_ref }}-token-secret"
            namespace: "{{ _config_onprem_edenlab_io_k3sremotemachine.metadata.namespace }}"
          register: k3s_token_secret
          delegate_to: localhost
          run_once: true
          when: not k3s_init_server | default(false)

        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Set token fact from secret"
          ansible.builtin.set_fact:
            k3s_token: "{{ (k3s_token_secret.resources[0].data.token | b64decode) | default('') }}"
          when: not k3s_init_server | default(false)

        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Set definition token fact"
          ansible.builtin.set_fact:
            k3s_token: ""
          when: k3s_init_server | default(false)

        - name: Run K3S node role
          import_role:
            name: k3s_node
          vars:
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_common_args: '-o ControlMaster=no -o ControlPersist=no -o ControlPath=none'
            ansible_ssh_private_key_file: /opt/ssh/id_rsa
            ansible_connection: ssh
            k3s_token: "{{ k3s_token }}"

        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Copy kubeconfig from remote to local"
          set_fact:
            k3s_kubeconfig_local: "{{ hostvars[inventory_hostname]['k3s_kubeconfig'] | default('Not defined') }}"
          run_once: true

        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Copy token from remote to local"
          set_fact:
            k3s_token_local: "{{ hostvars[inventory_hostname]['k3s_token'] | default('Not defined') }}"
          run_once: true

        # If this is the first server, store kubeconfig to secret
        - name: Create secret with kubeconfig
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ k3s_prefix_secret_ref }}-kubeconfig-secret"
                namespace: "{{ _config_onprem_edenlab_io_k3sremotemachine.metadata.namespace }}"
              stringData:
                token: "{{ k3s_kubeconfig_local }}"
          when: k3s_init_server | default(false)
          delegate_to: localhost
          run_once: true

        # If this is the first server, store token to secret
        - name: Create secret with token
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ k3s_prefix_secret_ref }}-token-secret"
                namespace: "{{ _config_onprem_edenlab_io_k3sremotemachine.metadata.namespace }}"
              stringData:
                token: "{{ k3s_token_local }}"
          when: k3s_init_server | default(false)
          delegate_to: localhost
          run_once: true

        - name: Set phase to "Ready"
          include_role:
            name: operator_status
          vars:
            new_phase: "Ready"
            expected_previous_phase: ["Failed", "Installing"]
            new_message: "K3S node successfully configured"

      rescue:
        - name: Set phase to "Failed"
          include_role:
            name: operator_status
          vars:
            new_phase: "Failed"
            expected_previous_phase: ["Installing", "Ready"]
            new_message: "An error occurred during K3S setup"
