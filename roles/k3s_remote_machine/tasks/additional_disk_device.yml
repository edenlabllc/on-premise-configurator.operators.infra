- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Ensure device path is specified"
  ansible.builtin.assert:
    that:
      - additional_disk_device is defined
      - additional_disk_device | length > 0
    fail_msg: "additional_disk_device is required."

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Ensure mount path exists"
  ansible.builtin.file:
    path: "{{ additional_disk_mount_path }}"
    state: directory
    mode: '0755'
  when: additional_disk_mount

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Check if disk is already formatted"
  ansible.builtin.command: lsblk -no FSTYPE "{{ additional_disk_device }}"
  register: disk_format_check
  changed_when: false
  failed_when: false
  when: additional_disk_formatted

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Get disk size in bytes"
  ansible.builtin.command: blockdev --getsize64 "{{ additional_disk_device }}"
  register: disk_size_bytes
  changed_when: false
  when: additional_disk_formatted

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Calculate inode ratio for ext4"
  ansible.builtin.set_fact:
    calculated_inode_ratio: "{{ [disk_size_bytes.stdout | int // 2147483647, 4096] | max }}"
  when:
    - additional_disk_formatted
    - additional_disk_fstype == 'ext4'

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Format ext4 with max inodes"
  ansible.builtin.command: >
    mkfs.ext4 -i {{ calculated_inode_ratio }} {{ additional_disk_device }}
  when:
    - additional_disk_formatted
    - disk_format_check.stdout == ""
    - additional_disk_fstype == 'ext4'

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Format xfs with max inodes"
  ansible.builtin.command: >
    mkfs.xfs -f -i maxpct=100 {{ additional_disk_device }}
  when:
    - additional_disk_formatted
    - disk_format_check.stdout == ""
    - additional_disk_fstype == 'xfs'

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Fail if filesystem type is unsupported"
  ansible.builtin.fail:
    msg: "Unsupported filesystem type '{{ additional_disk_fstype }}'. Only ext4 and xfs are supported."
  when:
    - additional_disk_formatted
    - additional_disk_fstype not in ['ext4', 'xfs']

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Get disk UUID"
  ansible.builtin.command: blkid -s UUID -o value "{{ additional_disk_device }}"
  register: disk_uuid
  changed_when: false
  when: additional_disk_mount

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Add mount to fstab"
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: "UUID={{ disk_uuid.stdout }} {{ additional_disk_mount_path }} {{ additional_disk_fstype }} defaults 0 2"
    state: present
    create: yes
    insertafter: EOF
  when: additional_disk_mount

- name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Mount additional disk"
  ansible.builtin.mount:
    path: "{{ additional_disk_mount_path }}"
    src: "UUID={{ disk_uuid.stdout }}"
    fstype: "{{ additional_disk_fstype }}"
    state: mounted
  when: additional_disk_mount
