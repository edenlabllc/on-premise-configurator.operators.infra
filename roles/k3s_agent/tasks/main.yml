---
- name: Setup K3S agent
  block:
    # If airgapped, all K3s artifacts are already on the node.
    # We should be downloading and installing the newer version only if we are in one of the following cases :
    #   - we couldn't get k3s installed version in the first task of this role
    #   - the installed version of K3s on the nodes is older than the requested version in ansible vars
    - name: Download artifact only if needed
      when:
        - ansible_check_mode
        - not k3s_airgap
        - installed_k3s_version is undefined or ( installed_k3s_version is defined and installed_k3s_version is version(k3s_version, '<') )
      block:
        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Download K3S install script"
          ansible.builtin.get_url:
            url: https://get.k3s.io/
            timeout: 120
            dest: /usr/local/bin/k3s-install.sh
            owner: root
            group: root
            mode: "0755"

        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Download K3S binary"
          ansible.builtin.command:
            cmd: /usr/local/bin/k3s-install.sh
          environment:
            INSTALL_K3S_SKIP_START: "true"
            INSTALL_K3S_VERSION: "{{ k3s_version }}"
            INSTALL_K3S_EXEC: "agent"
          changed_when: true

    - name: Setup optional config file
      when: k3s_agent_config_yaml is defined and k3s_agent_config_yaml | length > 0
      block:
        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Make config directory"
          ansible.builtin.file:
            path: "/etc/rancher/k3s"
            mode: "0755"
            state: directory
        - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Copy config values"
          ansible.builtin.copy:
            content: "{{ k3s_agent_config_yaml }}"
            dest: "/etc/rancher/k3s/config.yaml"
            mode: "0644"
          register: _agent_config_result

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Add service environment variables"
      when: k3s_extra_service_envs is defined and k3s_extra_service_envs | length > 0
      ansible.builtin.lineinfile:
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ k3s_extra_service_envs }}"

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Delete any existing token from the environment if different from the new one"
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ k3s_systemd_dir }}/k3s-agent.service.env"
        regexp: "^K3S_TOKEN=\\s*(?!{{ k3s_token }}\\s*$)"

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Add the token for joining the cluster to the environment"
      no_log: true # avoid logging the server token
      ansible.builtin.lineinfile:
        path: "{{ k3s_systemd_dir }}/k3s-agent.service.env"
        line: "{{ item }}"
      with_items:
        - "K3S_TOKEN={{ k3s_token }}"

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Copy K3s service file"
      register: k3s_agent_service
      ansible.builtin.template:
        src: "k3s-agent.service.j2"
        dest: "{{ k3s_systemd_dir }}/k3s-agent.service"
        owner: root
        group: root
        mode: "u=rw,g=r,o=r"

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Enable and check K3s service"
      ansible.builtin.systemd:
        name: k3s-agent
        daemon_reload: "{{ true if k3s_agent_service.changed else false }}"
        state: "{{ 'restarted' if (k3s_agent_service.changed or _agent_config_result.changed) else 'started' }}"
        enabled: true
  become: true
  delegate_to: "{{ ansible_host }}"
