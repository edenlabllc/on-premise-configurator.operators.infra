---
- name: Install K3S cluster
  block:
    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Check if K3S is already installed"
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_binary

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Get installed K3S version"
      ansible.builtin.command: k3s --version
      register: k3s_version_check
      failed_when: false
      changed_when: false
      when: k3s_binary.stat.exists

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Download K3S installer script"
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: '0755'

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Determine if node is already part of cluster"
      ansible.builtin.stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: k3s_config

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Set install mode fact"
      ansible.builtin.set_fact:
        install_k3s: true
      when: not k3s_config.stat.exists or
            (k3s_version_check.stdout is defined and
             (k3s_version_check.stdout | regex_search(k3s_version)) == '')

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Ensure /etc/rancher/k3s directory exists"
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        mode: "0755"
        owner: root
        group: root
      become: true

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Write K3S config file"
      ansible.builtin.copy:
        dest: /etc/rancher/k3s/config.yaml
        content: "{{ k3s_config_file }}"
        mode: "0644"

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Build final install environment"
      ansible.builtin.set_fact:
        k3s_install_env: >-
          {{
            dict(
              [('INSTALL_K3S_VERSION', k3s_version)] +
              [('INSTALL_K3S_EXEC', k3s_role)] +
              ([('K3S_TOKEN', k3s_token)] if (k3s_token is defined and k3s_token | length > 0) else []) 
            )
          }}

#    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }}"
#      debug:
#        msg: "{{ k3s_install_env }}"

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Install or upgrade K3S"
      ansible.builtin.shell: |
        sh /tmp/k3s-install.sh
      environment: "{{ k3s_install_env }}"
      when: install_k3s | default(false)
      args:
        creates: /etc/rancher/k3s/k3s.yaml

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Enable and start K3S service"
      ansible.builtin.service:
        name: "{{ 'k3s' if k3s_role == 'server' else 'k3s-agent' }}"
        state: started
        enabled: true

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Wait for kubeconfig to exist (for server)"
      ansible.builtin.wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        timeout: 60
      when: k3s_role == 'server'

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Read K3S kubeconfig from local file"
      ansible.builtin.slurp:
        src: /etc/rancher/k3s/k3s.yaml
      register: raw_k3s_kubeconfig
      when: k3s_role == 'server' and (k3s_init_server | default(false))

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Read K3S token from local file"
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: raw_k3s_token
      when: k3s_role == 'server' and (k3s_init_server | default(false))

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Set K3S kubeconfig fact for current host"
      ansible.builtin.set_fact:
        k3s_kubeconfig: >-
          {{
            (raw_k3s_kubeconfig.content | b64decode)
            | regex_replace('server: https://[^:]+:6443', 'server: https://' ~ ansible_host ~ ':6443')
          }}
      when: raw_k3s_kubeconfig is defined and (k3s_init_server | default(false))

    - name: "Running on: {{ hostname }} with IP: {{ ansible_host }} - Set K3S token fact for current host"
      ansible.builtin.set_fact:
        k3s_token: "{{ raw_k3s_token['content'] | b64decode | trim }}"
      when: raw_k3s_token is defined and (k3s_init_server | default(false))
  become: true
  delegate_to: "{{ ansible_host }}"
